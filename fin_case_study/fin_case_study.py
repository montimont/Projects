# -*- coding: utf-8 -*-
"""Copy of MB_Case_Study.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SauPzQrTYsV7pUSNC-6y4cRAYAKWpH9W

# DATA SETUP

## LIBRARIES AND DATA
"""

import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow import keras
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.model_selection import train_test_split
import statsmodels.api as sm
from sklearn.preprocessing import LabelEncoder, StandardScaler
from imblearn.over_sampling import SMOTE
from sklearn.metrics import roc_curve, roc_auc_score

import warnings
warnings.filterwarnings('ignore')

data = pd.read_csv("/content/First_800_Rows.csv", low_memory=False)

"""## CHECKING AND HANDLING POSSIBLE NULL VALUES"""

data.isnull().sum()

data.info()

"""# FEATURE ENGINEERING AND SELECTION

## CATEGORIZE COLUMNS AS 'BINARY', 'CATEGORICAL', OR 'CONTINUOUS'.
"""

categorical_columns = ['CHK_ACCT', 'HISTORY', 'SAV_ACCT', 'EMPLOYMENT', 'PRESENT_RESIDENT', 'JOB']

numerical_columns = ['DURATION', 'AMOUNT', 'AGE', 'INSTALL_RATE', 'NUM_CREDITS', 'NUM_DEPENDENTS']

scaler = StandardScaler()
data[numerical_columns] = scaler.fit_transform(data[numerical_columns])

binary_columns = ['NEW_CAR', 'USED_CAR', 'FURNITURE', 'RADIO/TV', 'EDUCATION', 'RETRAINING', 'MALE_DIV',
                  'MALE_SINGLE', 'MALE_MAR_or_WID', 'CO-APPLICANT', 'GUARANTOR', 'REAL_ESTATE', 'PROP_UNKN_NONE',
                  'OTHER_INSTALL', 'RENT', 'OWN_RES', 'TELEPHONE', 'FOREIGN', 'DEFAULT']
data[binary_columns] = data[binary_columns].astype(int)

"""## LOGIT

### CHECK SIGNIFICANCE OF NUMERICAL
"""

numerical_columns = ['DURATION', 'AMOUNT', 'INSTALL_RATE', 'AGE']

numerical_data = data_with_dummies[numerical_columns + ['DEFAULT']]

y_numerical = numerical_data['DEFAULT']
X_numerical = numerical_data.drop('DEFAULT', axis=1)

X_numerical = sm.add_constant(X_numerical)

logit_model_numerical = sm.Logit(y_numerical, X_numerical)
logit_result_numerical = logit_model_numerical.fit()

logit_summary_numerical = logit_result_numerical.summary()
logit_summary_numerical

"""### CHECK SIGNIFICANCE OF BINARY"""

binary_columns = ['NEW_CAR', 'USED_CAR', 'FURNITURE', 'RADIO/TV', 'EDUCATION', 'RETRAINING', 'MALE_DIV',
                  'MALE_SINGLE', 'MALE_MAR_or_WID', 'CO-APPLICANT', 'GUARANTOR', 'REAL_ESTATE',
                  'PROP_UNKN_NONE', 'OTHER_INSTALL', 'RENT', 'OWN_RES', 'TELEPHONE', 'FOREIGN']

binary_data = data_with_dummies[binary_columns + ['DEFAULT']]

y_binary = binary_data['DEFAULT']
X_binary = binary_data.drop('DEFAULT', axis=1)

X_binary = sm.add_constant(X_binary)

logit_model_binary = sm.Logit(y_binary, X_binary)
logit_result_binary = logit_model_binary.fit()

logit_summary_binary = logit_result_binary.summary()
logit_summary_binary

"""### CHECK SIGNIFICANCE OF CATEGORIES

"""

categorical_columns = ['CHK_ACCT', 'HISTORY', 'SAV_ACCT', 'EMPLOYMENT', 'PRESENT_RESIDENT', 'JOB']

categorical_data = pd.get_dummies(data[categorical_columns], columns=categorical_columns, drop_first=True)

categorical_data['DEFAULT'] = data['DEFAULT']

y_categorical = categorical_data['DEFAULT']
X_categorical = categorical_data.drop('DEFAULT', axis=1)

X_categorical = sm.add_constant(X_categorical)

logit_model_categorical = sm.Logit(y_categorical, X_categorical)
logit_result_categorical = logit_model_categorical.fit()

logit_summary_categorical = logit_result_categorical.summary()
logit_summary_categorical

"""### COMBINING SIGNIFICANT VARIABLES FROM ALL THREE DATATYPES INTO ONE DATAFRAME

"""

significant_vars = [
    'DURATION', 'AMOUNT', 'INSTALL_RATE', 'AGE',
    'USED_CAR', 'MALE_SINGLE', 'REAL_ESTATE', 'PROP_UNKN_NONE', 'OTHER_INSTALL', 'FOREIGN',
    'CHK_ACCT_1', 'CHK_ACCT_2', 'CHK_ACCT_3', 'HISTORY_2', 'HISTORY_3', 'HISTORY_4',
    'SAV_ACCT_3', 'SAV_ACCT_4', 'PRESENT_RESIDENT_2', 'PRESENT_RESIDENT_4'
]

combined_data = pd.concat([data_with_dummies[significant_vars], y], axis=1)

y_combined = combined_data['DEFAULT']
X_combined = combined_data.drop('DEFAULT', axis=1)

X_combined = sm.add_constant(X_combined)

logit_model_combined = sm.Logit(y_combined, X_combined)
logit_result_combined = logit_model_combined.fit()

logit_summary_combined = logit_result_combined.summary()
logit_summary_combined

"""### FINAL SELECTION OF FEATURES"""

final_features = [
    'DURATION', 'AMOUNT', 'INSTALL_RATE', 'AGE', 'USED_CAR', 'MALE_SINGLE',
    'REAL_ESTATE', 'PROP_UNKN_NONE', 'OTHER_INSTALL', 'FOREIGN', 'CHK_ACCT_1',
    'CHK_ACCT_2', 'CHK_ACCT_3', 'HISTORY_2', 'HISTORY_3', 'HISTORY_4',
    'SAV_ACCT_3', 'SAV_ACCT_4', 'PRESENT_RESIDENT_2'
]

final_data = data_with_dummies[final_features + ['DEFAULT']]

y_final = final_data['DEFAULT']
X_final = final_data.drop('DEFAULT', axis=1)

X_final = sm.add_constant(X_final)

logit_model_final = sm.Logit(y_final, X_final)
logit_result_final = logit_model_final.fit()

logit_summary_final = logit_result_final.summary()
logit_summary_final

"""### DOUBLE CHECKING NEW DATAFRAME"""

df_analysis = data_with_dummies[final_features].copy()

df_analysis.head()

"""# TRAINING AND TESTING

## BENCHMARK TRAINING
"""

from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

X = df_analysis
y = data['DEFAULT'].astype(int)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=15, stratify=y)

y_train_value_counts_normalized = y_train.value_counts(normalize=True)

plt.figure(figsize=(8, 6))
value_counts_normalized = y.value_counts(normalize=True)
value_counts_normalized.plot(kind='bar', color='blue')
plt.title('Distribution of Target Variable (Normalized) - Full Dataset')
plt.xlabel('Target Variable')
plt.ylabel('Normalized Frequency')
plt.show()

plt.figure(figsize=(8, 6))
y_train_value_counts_normalized.plot(kind='bar', color='green')
plt.title('Distribution of Target Variable (Normalized) - Training Set')
plt.xlabel('Target Variable')
plt.ylabel('Normalized Frequency')
plt.show()

X_test.shape

from tensorflow import keras
from sklearn.metrics import classification_report, roc_curve, roc_auc_score
import numpy as np
import matplotlib.pyplot as plt

def ANN(X_train, y_train, X_test, y_test, loss, weights):
    model = keras.Sequential([
        keras.layers.Dense(X_train.shape[1], input_dim=X_train.shape[1], activation='relu'),
        keras.layers.Dense(15, activation='relu'),
        keras.layers.Dense(1, activation='sigmoid')
    ])

    model.compile(optimizer='adam', loss=loss, metrics=['accuracy'])

    if weights == -1:
        model.fit(X_train, y_train, epochs=100, verbose=0)
    else:
        model.fit(X_train, y_train, epochs=100, class_weight=weights, verbose=0)

    print(model.evaluate(X_test, y_test, verbose=0))

    y_preds = model.predict(X_test)
    y_preds = np.round(y_preds)

    print("Classification Report: \n", classification_report(y_test, y_preds))

    fpr, tpr, thresholds = roc_curve(y_test, y_preds.flatten())
    roc_auc = roc_auc_score(y_test, y_preds.flatten())

    plt.figure()
    plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (AUC = {roc_auc:.2f})')
    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.05])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('Receiver Operating Characteristic (ROC) Curve')
    plt.legend(loc='lower right')
    plt.show()

    return model, y_preds

loss_function = 'binary_crossentropy'
class_weights = {0: 1.0, 1: 1.0}

model, y_preds = ANN(X_train, y_train, X_test, y_test, loss_function, -1)

"""## RETRAINING TO ADDRESS DATA IMBALANCE"""

from sklearn.utils import resample

df_analysis['DEFAULT'] = data['DEFAULT']

df_majority = df_analysis[df_analysis['DEFAULT'] == 0]
df_minority = df_analysis[df_analysis['DEFAULT'] == 1]

df_minority_upsampled = resample(df_minority,
                                 replace=True,
                                 n_samples=len(df_majority),
                                 random_state=123)

df_upsampled = pd.concat([df_majority, df_minority_upsampled])

print('Random over-sampling:')
print(df_upsampled['DEFAULT'].value_counts())

value_counts_normalized = df_upsampled['DEFAULT'].value_counts(normalize=True)

plt.figure(figsize=(8, 6))
value_counts_normalized.plot(kind='bar', color='red')
plt.title('Distribution of Target Variable (Normalized) - After Oversampling')
plt.xlabel('Target Variable')
plt.ylabel('Normalized Frequency')
plt.show()

from sklearn.model_selection import train_test_split

X = df_upsampled.drop('DEFAULT', axis='columns')
y = df_upsampled['DEFAULT']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=15, stratify=y)

y_preds = ANN(X_train, y_train, X_test, y_test, 'binary_crossentropy', -1)

"""# SAVING AND UTILIZING MODEL ON UNSEEN SET OF DATA"""

model.save('/content/my_model2')

import pandas as pd
import numpy as np
import statsmodels.api as sm
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import load_model
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report, roc_curve, roc_auc_score
from imblearn.over_sampling import SMOTE

new_data = pd.read_csv("/content/Last_200_Rows.csv")

scaler = StandardScaler()

numerical_columns = ['DURATION', 'AMOUNT', 'AGE', 'INSTALL_RATE', 'NUM_CREDITS', 'NUM_DEPENDENTS']
binary_columns = ['NEW_CAR', 'USED_CAR', 'FURNITURE', 'RADIO/TV', 'EDUCATION', 'RETRAINING', 'MALE_DIV', 'MALE_SINGLE', 'MALE_MAR_or_WID', 'CO-APPLICANT', 'GUARANTOR', 'REAL_ESTATE', 'PROP_UNKN_NONE', 'OTHER_INSTALL', 'RENT', 'OWN_RES', 'TELEPHONE', 'FOREIGN']
categorical_columns = ['CHK_ACCT', 'HISTORY', 'SAV_ACCT', 'EMPLOYMENT', 'PRESENT_RESIDENT', 'JOB']

new_data[numerical_columns] = scaler.fit_transform(new_data[numerical_columns])

new_data[binary_columns] = new_data[binary_columns].astype(int)

new_data = pd.get_dummies(new_data, columns=categorical_columns, drop_first=True)

y_new = new_data['DEFAULT']
X_new = new_data.drop('DEFAULT', axis=1)

smote = SMOTE(sampling_strategy='minority')
X_new_sm, y_new_sm = smote.fit_resample(X_new, y_new)

final_features = [
    'DURATION', 'AMOUNT', 'INSTALL_RATE', 'AGE', 'USED_CAR', 'MALE_SINGLE',
    'REAL_ESTATE', 'PROP_UNKN_NONE', 'OTHER_INSTALL', 'FOREIGN', 'CHK_ACCT_1',
    'CHK_ACCT_2', 'CHK_ACCT_3', 'HISTORY_2', 'HISTORY_3', 'HISTORY_4',
    'SAV_ACCT_3', 'SAV_ACCT_4', 'PRESENT_RESIDENT_2'
]

for feature in final_features:
    if feature not in X_new_sm.columns:
        X_new_sm[feature] = 0

X_new_sm_final = X_new_sm[final_features]

model = load_model('/content/my_model2')

predictions = model.predict(X_new_sm_final)

print("Classification Report:\n", classification_report(y_new_sm, np.round(predictions)))

print(y_new_sm.value_counts())

print(X_new_sm_final.shape)